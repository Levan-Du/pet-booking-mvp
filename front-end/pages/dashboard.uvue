<template>
	<view class="container">
		<view class="header">
			<text class="title">预约管理</text>
			<view class="filter-section">
				<picker :range="statusOptions" @change="onStatusChange" class="filter-picker">
					<view class="picker-value">
						{{ selectedStatus === 'all' ? '全部状态' : statusOptions.find(s => s.value === selectedStatus)?.label }}
					</view>
				</picker>
				<picker mode="date" :value="selectedDate" @change="onFilterDateChange" class="filter-picker">
					<view class="picker-value">
						{{ selectedDate || '选择日期' }}
					</view>
				</picker>
			</view>
		</view>

		<view class="appointment-list">
			<view v-for="appointment in appointments" :key="appointment.id" class="appointment-card">
				<view class="card-header">
					<text class="service-name">{{ appointment.service_name }}</text>
					<view :class="['status-badge', appointment.status]">
						{{ getStatusText(appointment.status) }}
					</view>
				</view>

				<view class="card-content">
					<view class="info-row">
						<text class="label">客户:</text>
						<text class="value">{{ appointment.customer_name }}</text>
					</view>
					<view class="info-row">
						<text class="label">电话:</text>
						<text class="value">{{ appointment.customer_phone }}</text>
					</view>
					<view class="info-row">
						<text class="label">宠物:</text>
						<text class="value">
							{{ getPetTypeText(appointment.pet_type) }} ·
							{{ appointment.pet_breed || '未知品种' }} ·
							{{ appointment.pet_size }}
						</text>
					</view>
					<view class="info-row">
						<text class="label">时间:</text>
						<text class="value">
							{{ appointment.appointment_date }} {{ appointment.appointment_time }}
						</text>
					</view>
					<view v-if="appointment.special_notes" class="info-row">
						<text class="label">备注:</text>
						<text class="value notes">{{ appointment.special_notes }}</text>
					</view>
				</view>

				<view class="card-actions">
					<button v-if="appointment.status === 'pending'" @click="updateStatus(appointment.id, 'confirmed')"
						class="action-btn confirm">
						确认
					</button>
					<button v-if="appointment.status === 'confirmed'" @click="updateStatus(appointment.id, 'completed')"
						class="action-btn complete">
						完成
					</button>
					<button v-if="appointment.status !== 'cancelled' && appointment.status !== 'completed'"
						@click="updateStatus(appointment.id, 'cancelled')" class="action-btn cancel">
						取消
					</button>
				</view>
			</view>
		</view>

		<view v-if="loading" class="loading">
			<text>加载中...</text>
		</view>

		<view v-if="!loading && appointments.length === 0" class="empty">
			<text>暂无预约数据</text>
		</view>
	</view>
</template>

<script setup>
	import { ref, watch, onMounted } from 'vue'

	const appointments = ref([])
	const loading = ref(false)
	const selectedStatus = ref('all')
	const selectedDate = ref('')

	const statusOptions = ref([
		{ value: 'all', label: '全部状态' },
		{ value: 'pending', label: '待确认' },
		{ value: 'confirmed', label: '已确认' },
		{ value: 'completed', label: '已完成' },
		{ value: 'cancelled', label: '已取消' }
	])

	const loadAppointments = async () => {
		loading.value = true
		try {
			const params = {}
			if (selectedStatus.value !== 'all') {
				params.status = selectedStatus.value
			}
			if (selectedDate.value) {
				params.date = selectedDate.value
			}

			const response = await uni.request({
				url: 'http://localhost:3000/api/admin/appointments',
				method: 'GET',
				data: params
			})

			if (response.data.success) {
				appointments.value = response.data.data
			}
		} catch (error) {
			console.error('加载预约失败:', error)
			uni.showToast({
				title: '加载数据失败',
				icon: 'error'
			})
		} finally {
			loading.value = false
		}
	}

	const updateStatus = async (appointmentId, newStatus) => {
		try {
			const response = await uni.request({
				url: `http://localhost:3000/api/admin/appointments/${appointmentId}`,
				method: 'PUT',
				data: { status: newStatus }
			})

			if (response.data.success) {
				uni.showToast({
					title: '状态更新成功',
					icon: 'success'
				})
				loadAppointments()
			} else {
				uni.showToast({
					title: response.data.message || '更新失败',
					icon: 'error'
				})
			}
		} catch (error) {
			console.error('更新状态失败:', error)
			uni.showToast({
				title: '网络错误，请重试',
				icon: 'error'
			})
		}
	}

	const getStatusText = (status) => {
		const statusMap = {
			pending: '待确认',
			confirmed: '已确认',
			completed: '已完成',
			cancelled: '已取消'
		}
		return statusMap[status] || status
	}

	const getPetTypeText = (type) => {
		const typeMap = {
			dog: '狗狗',
			cat: '猫咪',
			other: '其他'
		}
		return typeMap[type] || type
	}

	const onStatusChange = (e) => {
		selectedStatus.value = statusOptions.value[e.detail.value].value
	}

	const onFilterDateChange = (e) => {
		selectedDate.value = e.detail.value
	}

	// 监听筛选条件变化
	watch([selectedStatus, selectedDate], () => {
		loadAppointments()
	})

	// 使用 onMounted 替代 onLoad
	onMounted(() => {
		loadAppointments()
	})
</script>

<style>
	/* 样式部分保持不变 */
	.container {
		padding: 20rpx;
		background-color: #f5f5f5;
		min-height: 100vh;
	}

	.header {
		margin-bottom: 30rpx;
	}

	.title {
		font-size: 36rpx;
		font-weight: bold;
		color: #333;
		margin-bottom: 20rpx;
	}

	.filter-section {
		display: flex;
		gap: 20rpx;
	}

	.filter-picker {
		flex: 1;
		border: 2rpx solid #e0e0e0;
		border-radius: 12rpx;
		padding: 16rpx;
		background: white;
	}

	.appointment-list {
		gap: 20rpx;
		display: flex;
		flex-direction: column;
	}

	.appointment-card {
		background: white;
		border-radius: 16rpx;
		padding: 30rpx;
	}

	.card-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20rpx;
	}

	.service-name {
		font-size: 32rpx;
		font-weight: bold;
		color: #333;
	}

	.status-badge {
		padding: 8rpx 16rpx;
		border-radius: 20rpx;
		font-size: 24rpx;
		font-weight: 500;
	}

	.status-badge.pending {
		background-color: #fff3cd;
		color: #856404;
	}

	.status-badge.confirmed {
		background-color: #d1ecf1;
		color: #0c5460;
	}

	.status-badge.completed {
		background-color: #d4edda;
		color: #155724;
	}

	.status-badge.cancelled {
		background-color: #f8d7da;
		color: #721c24;
	}

	.card-content {
		gap: 12rpx;
		display: flex;
		flex-direction: column;
	}

	.info-row {
		display: flex;
	}

	.label {
		font-size: 28rpx;
		color: #666;
		min-width: 120rpx;
	}

	.value {
		font-size: 28rpx;
		color: #333;
		flex: 1;
	}

	.value.notes {
		color: #e74c3c;
	}

	.card-actions {
		display: flex;
		gap: 20rpx;
		margin-top: 20rpx;
	}

	.action-btn {
		flex: 1;
		padding: 16rpx;
		border: none;
		border-radius: 8rpx;
		font-size: 26rpx;
	}

	.action-btn.confirm {
		background-color: #007AFF;
		color: white;
	}

	.action-btn.complete {
		background-color: #34C759;
		color: white;
	}

	.action-btn.cancel {
		background-color: #FF3B30;
		color: white;
	}

	.loading,
	.empty {
		text-align: center;
		padding: 60rpx;
		color: #666;
		font-size: 28rpx;
	}
</style>